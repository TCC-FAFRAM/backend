generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario    Int      @id @default(autoincrement())
  nome          String
  sobre_nome    String
  email         String   @unique
  senha         String?
  cpf           String   @unique
  tipo          Role     @default(USER)
  data_cadastro DateTime @default(now())

  // Para usuarios do tipo USER, esses campos sao obrigatorios.
  // Para ADMIN e MASTER, poderao ser nulos.
  fk_id_funcao Int?
  Funcao       Funcao? @relation(fields: [fk_id_funcao], references: [id_funcao])

  fk_id_fazenda Int?
  Fazenda       Fazenda? @relation(fields: [fk_id_fazenda], references: [id_fazenda])

  // Campos de endere√ßo (baseados na API de localidades do IBGE)
  distrito_id  Int?
  municipio_id Int?
  complemento  String?

  // Outras relacoes...
  Certificados               Certificado[]
  TentativasProva            TentativasProva[]
  CursosConcluidos           CursosConcluidos[]
  LiberacoesCursoFuncionario LiberacaoCurso[]   @relation(name: "FuncionarioLiberacao")
  LiberacoesCursoAdmin       LiberacaoCurso[]   @relation(name: "AdminLiberacao")
  AulasConcluidas            AulasConcluidas[]
}

model Fazenda {
  id_fazenda   Int       @id @default(autoincrement())
  nome         String
  proprietario String?
  descricao    String?
  distrito_id  Int?
  municipio_id Int?
  complemento  String?
  Usuarios     Usuario[]
}

model Funcao {
  id_funcao   Int           @id @default(autoincrement())
  nome        String
  FuncaoCurso FuncaoCurso[]
  Usuarios    Usuario[]
}

model Curso {
  id_curso        Int              @id @default(autoincrement())
  titulo          String
  descricao       String
  Aulas           Aula[]
  Certificados    Certificado[]
  FuncaoCurso     FuncaoCurso[]
  LiberacoesCurso LiberacaoCurso[] @relation("CursoLiberacao")
  Prova           Prova?
}

model FuncaoCurso {
  fk_id_funcao Int
  fk_id_curso  Int
  Curso        Curso  @relation(fields: [fk_id_curso], references: [id_curso])
  Funcao       Funcao @relation(fields: [fk_id_funcao], references: [id_funcao])

  @@id([fk_id_funcao, fk_id_curso])
}

model Aula {
  id_aula          Int                @id @default(autoincrement())
  titulo           String
  url_video        String
  duracao          Int
  descricao        String
  fk_id_curso      Int
  Curso            Curso              @relation(fields: [fk_id_curso], references: [id_curso])
  AulasConcluidas  AulasConcluidas[]
  CursosConcluidos CursosConcluidos[]
}

model CursosConcluidos {
  id_concluidos Int      @id @default(autoincrement())
  fk_id_usuario Int
  fk_id_aula    Int
  completado_em DateTime @default(now())
  Aula          Aula     @relation(fields: [fk_id_aula], references: [id_aula])
  Usuario       Usuario  @relation(fields: [fk_id_usuario], references: [id_usuario])
}

model Certificado {
  id_certificado  Int               @id @default(autoincrement())
  fk_id_usuario   Int
  fk_id_curso     Int
  data_emissao    DateTime          @default(now())
  url_certificado String
  status          StatusCertificado @default(INATIVO)
  Curso           Curso             @relation(fields: [fk_id_curso], references: [id_curso])
  Usuario         Usuario           @relation(fields: [fk_id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Prova {
  id_prova        Int               @id @default(autoincrement())
  fk_id_curso     Int               @unique
  nota_minima     Float
  total_perguntas Int
  Curso           Curso             @relation(fields: [fk_id_curso], references: [id_curso])
  TentativasProva TentativasProva[]
}

model TentativasProva {
  id_tentativa_prova Int      @id @default(autoincrement())
  fk_id_funcionario  Int
  fk_id_prova        Int
  nota               Float
  data_tentativa     DateTime @default(now())
  passou             Boolean
  Usuario            Usuario  @relation(fields: [fk_id_funcionario], references: [id_usuario])
  Prova              Prova    @relation(fields: [fk_id_prova], references: [id_prova])
}

model LiberacaoCurso {
  id_liberacao_curso Int      @id @default(autoincrement())
  fk_id_funcionario  Int
  fk_id_curso        Int
  fk_id_admin        Int
  data_liberacao     DateTime @default(now())
  Admin              Usuario  @relation("AdminLiberacao", fields: [fk_id_admin], references: [id_usuario])
  Curso              Curso    @relation("CursoLiberacao", fields: [fk_id_curso], references: [id_curso])
  Funcionario        Usuario  @relation("FuncionarioLiberacao", fields: [fk_id_funcionario], references: [id_usuario])
}

model Log {
  id_log        Int      @id @default(autoincrement())
  tabela        String
  operacao      String
  id_registro   Int
  dados_antigos Json?
  dados_novos   Json?
  data_registro DateTime @default(now())
}

model AulasConcluidas {
  id_aula_concluida Int      @id @default(autoincrement())
  fk_id_usuario     Int
  fk_id_aula        Int
  completado_em     DateTime @default(now())
  Aula              Aula     @relation(fields: [fk_id_aula], references: [id_aula])
  Usuario           Usuario  @relation(fields: [fk_id_usuario], references: [id_usuario])
}

enum Role {
  USER
  ADMIN
  MASTER
}

enum StatusCertificado {
  INATIVO
  SOLICITADO
  GERADO
  APROVADO
  RECEBIDO
}
