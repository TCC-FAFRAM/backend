generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NOVOS MODELS DE LOCALIZAÇÃO

model Estado {
  id_estado   Int         @id @default(autoincrement())
  nome        String
  sigla       String      @unique
  Municipios  Municipio[]
}

model Municipio {
  id_municipio  Int        @id @default(autoincrement())
  nome          String
  fk_id_estado  Int
  Estado        Estado     @relation(fields: [fk_id_estado], references: [id_estado], onDelete: Cascade)
  Distritos     Distrito[]
  Usuarios      Usuario[]
  Fazendas      Fazenda[]
}

model Distrito {
  id_distrito     Int         @id @default(autoincrement())
  nome            String
  fk_id_municipio Int
  Municipio       Municipio   @relation(fields: [fk_id_municipio], references: [id_municipio], onDelete: Cascade)
  Usuarios        Usuario[]
  Fazendas        Fazenda[]
}

// MODELS DO SEU SISTEMA

model Usuario {
  id_usuario                 Int                @id @default(autoincrement())
  nome                       String
  sobre_nome                 String
  email                      String             @unique
  senha                      String?
  cpf                        String             @unique
  tipo                       Role               @default(USER)
  data_cadastro              DateTime           @default(now())
  fk_id_funcao               Int?
  fk_id_fazenda              Int?
  distrito_id                Int?
  municipio_id               Int?
  complemento                String?

  // RELACIONAMENTOS COM CASCADE
  Fazenda                    Fazenda?           @relation(fields: [fk_id_fazenda], references: [id_fazenda], onDelete: Cascade)
  Funcao                     Funcao?            @relation(fields: [fk_id_funcao], references: [id_funcao], onDelete: Cascade)
  Municipio                  Municipio?         @relation(fields: [municipio_id], references: [id_municipio], onDelete: Cascade)
  Distrito                   Distrito?          @relation(fields: [distrito_id], references: [id_distrito], onDelete: Cascade)

  // OUTROS RELACIONAMENTOS
  AulasConcluidas            AulasConcluidas[]
  Certificados               Certificado[]
  CursosConcluidos           CursosConcluidos[]
  LiberacoesCursoAdmin       LiberacaoCurso[]   @relation("AdminLiberacao")
  LiberacoesCursoFuncionario LiberacaoCurso[]   @relation("FuncionarioLiberacao")
  TentativasProva            TentativasProva[]
  CiclosModulo               CicloModulo[]
}

model Fazenda {
  id_fazenda   Int       @id @default(autoincrement())
  nome         String
  proprietario String?
  descricao    String?
  distrito_id  Int?
  municipio_id Int?
  complemento  String?

  Municipio    Municipio?   @relation(fields: [municipio_id], references: [id_municipio], onDelete: Cascade)
  Distrito     Distrito?    @relation(fields: [distrito_id], references: [id_distrito], onDelete: Cascade)
  Usuarios     Usuario[]
}

model Funcao {
  id_funcao   Int           @id @default(autoincrement())
  nome        String
  descricao   String?
  FuncaoCurso FuncaoCurso[]
  Usuarios    Usuario[]
}

model Curso {
  id_curso        Int              @id @default(autoincrement())
  titulo          String
  descricao       String
  url_img         String
  Certificados    Certificado[]
  FuncaoCurso     FuncaoCurso[]
  LiberacoesCurso LiberacaoCurso[] @relation("CursoLiberacao")
  Modulos         Modulo[]
}

model Modulo {
  id_modulo             Int               @id @default(autoincrement())
  titulo                String
  descricao             String
  ordem                 Int
  concluido             Boolean           @default(false)
  fk_id_curso           Int
  fk_id_modulo_anterior Int?

  Curso                 Curso             @relation(fields: [fk_id_curso], references: [id_curso], onDelete: Cascade)
  ModuloAnterior        Modulo?           @relation("ModuloSequencia", fields: [fk_id_modulo_anterior], references: [id_modulo], onDelete: Cascade)
  ModulosPosteriores    Modulo[]          @relation("ModuloSequencia")

  Aulas                 Aula[]
  aulas_concluidas      AulasConcluidas[]
  CiclosModulo          CicloModulo[]
  Prova                 Prova?
}

model CicloModulo {
  id_ciclo_modulo    Int      @id @default(autoincrement())
  fk_id_usuario      Int
  fk_id_modulo       Int
  concluido_em       DateTime @default(now())

  Usuario            Usuario  @relation(fields: [fk_id_usuario], references: [id_usuario], onDelete: Cascade)
  Modulo             Modulo   @relation(fields: [fk_id_modulo], references: [id_modulo], onDelete: Cascade)
  TentativasProva    TentativasProva[]
}

model FuncaoCurso {
  fk_id_funcao Int
  fk_id_curso  Int

  Curso        Curso  @relation(fields: [fk_id_curso], references: [id_curso], onDelete: Cascade)
  Funcao       Funcao @relation(fields: [fk_id_funcao], references: [id_funcao], onDelete: Cascade)

  @@id([fk_id_funcao, fk_id_curso])
}

model Aula {
  id_aula          Int                @id @default(autoincrement())
  titulo           String
  url_video        String
  duracao          Int
  descricao        String?
  fk_id_modulo     Int

  Modulo           Modulo             @relation(fields: [fk_id_modulo], references: [id_modulo], onDelete: Cascade)
  AulasConcluidas  AulasConcluidas[]
  CursosConcluidos CursosConcluidos[]
}

model CursosConcluidos {
  id_concluidos Int      @id @default(autoincrement())
  fk_id_usuario Int
  fk_id_aula    Int
  completado_em DateTime @default(now())

  Aula          Aula     @relation(fields: [fk_id_aula], references: [id_aula], onDelete: Cascade)
  Usuario       Usuario  @relation(fields: [fk_id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Certificado {
  id_certificado  Int               @id @default(autoincrement())
  fk_id_usuario   Int
  fk_id_curso     Int
  data_emissao    DateTime          @default(now())
  url_certificado String
  status          StatusCertificado @default(INATIVO)

  Curso           Curso             @relation(fields: [fk_id_curso], references: [id_curso], onDelete: Cascade)
  Usuario         Usuario           @relation(fields: [fk_id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Prova {
  id_prova        Int               @id @default(autoincrement())
  nota_minima     Float
  total_perguntas Int
  fk_id_modulo    Int               @unique

  Modulo          Modulo            @relation(fields: [fk_id_modulo], references: [id_modulo], onDelete: Cascade)
  Questoes        Questao[]
  TentativasProva TentativasProva[]
}

model Questao {
  id_questao       Int               @id @default(autoincrement())
  pergunta         String
  opcoes           String[]
  resposta_correta Int
  peso             Int
  fk_id_prova      Int

  Prova            Prova             @relation(fields: [fk_id_prova], references: [id_prova], onDelete: Cascade)
  RespostasAluno   RespostaQuestao[]
}

model RespostaQuestao {
  id_resposta     Int             @id @default(autoincrement())
  fk_id_questao   Int
  fk_id_tentativa Int
  resposta_aluno  Int

  Questao         Questao         @relation(fields: [fk_id_questao], references: [id_questao], onDelete: Cascade)
  TentativaProva  TentativasProva @relation(fields: [fk_id_tentativa], references: [id_tentativa_prova], onDelete: Cascade)
}

model TentativasProva {
  id_tentativa_prova Int               @id @default(autoincrement())
  fk_id_funcionario  Int
  fk_id_prova        Int
  nota               Float
  data_tentativa     DateTime          @default(now())
  passou             Boolean
  fk_id_ciclo_modulo Int

  Usuario            Usuario           @relation(fields: [fk_id_funcionario], references: [id_usuario], onDelete: Cascade)
  Prova              Prova             @relation(fields: [fk_id_prova], references: [id_prova], onDelete: Cascade)
  CicloModulo        CicloModulo       @relation(fields: [fk_id_ciclo_modulo], references: [id_ciclo_modulo], onDelete: Cascade)
  Respostas          RespostaQuestao[]
}

model LiberacaoCurso {
  id_liberacao_curso Int      @id @default(autoincrement())
  fk_id_funcionario  Int
  fk_id_curso        Int
  fk_id_admin        Int
  data_liberacao     DateTime @default(now())

  Admin              Usuario  @relation("AdminLiberacao", fields: [fk_id_admin], references: [id_usuario], onDelete: Cascade)
  Curso              Curso    @relation("CursoLiberacao", fields: [fk_id_curso], references: [id_curso], onDelete: Cascade)
  Funcionario        Usuario  @relation("FuncionarioLiberacao", fields: [fk_id_funcionario], references: [id_usuario], onDelete: Cascade)
}

model Log {
  id_log        Int      @id @default(autoincrement())
  tabela        String
  operacao      String
  id_registro   Int
  dados_antigos Json?
  dados_novos   Json?
  data_registro DateTime @default(now())
}

model AulasConcluidas {
  id_aula_concluida Int      @id @default(autoincrement())
  fk_id_usuario     Int
  fk_id_aula        Int
  completado_em     DateTime @default(now())
  moduloId_modulo   Int?

  Aula              Aula     @relation(fields: [fk_id_aula], references: [id_aula], onDelete: Cascade)
  Usuario           Usuario  @relation(fields: [fk_id_usuario], references: [id_usuario], onDelete: Cascade)
  Modulo            Modulo?  @relation(fields: [moduloId_modulo], references: [id_modulo], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  MASTER
}

enum StatusCertificado {
  INATIVO
  SOLICITADO
  GERADO
  APROVADO
  RECEBIDO
}
